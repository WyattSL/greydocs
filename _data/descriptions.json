{
    "CTFEvent": {
        "get_creator_name": "Returns a string with the name of the mission creator.",
        "get_description": "Returns a string with the description set from set_config",
        "get_mail_content": "Returns a string with the content of the email that the player will receive upon accepting the mission.",
        "get_template": "Returns a string with the public address of the rented server used as a template for the event.",
        "player_success": "This function is to be called when the player successfully completes the mission. When it is completed, the player and the event creator will receive a reward. THe more players complete the mission, the higher the mission scores, and the higher the rewards are for the creator & player. Returns false if the player has not accepted the mission or has already completed it, true otherwise."
    },
    "Blockchain": {
        "amount_mined": "Returns an int with the number of units of the coin that have been mined in total.",
        "coin_price": "Returns an int with the current unit value of the currency. In case of an error, a string is returned with the details.",
        "create_wallet": "Returns an object of type wallet, used to manage cryptocurrencies. In case of a error, a string is returned with the details.",
        "delete_coin": "Remove a crypto currency from the world. The credentials used in the creation of the currency are necessary.",
        "get_coin": "Returns an object of type Coin used to manage the currency. A string with the details is returned in case of an error.",
        "login_wallet": "Returns a wallet type object or a string in the event of an error, indicating the reason.",
        "show_history": "Returns a map with the latest changes in the value of a specific currency. The Key of the map is the index represented by an int. Value contains a list, where index 0 is the price of the coin it had in the past, index 1 indicates the date on which the price change occurred."
    },
    "Wallet": {
        "buy_coin": "Publish a purchase offer indicating the number of coins you wish to buy and the price ($) per unit you are willing to pay. The purchase will be finalized if there is any sale offer with a price less than or equal to the one proposed in the purchase. If there is no eligible offer to sell at that time, the offer to buy will remain publicly visible until a new offer to sell satisfies the requirements. If the publication has been successful, true is returned, in case of error a string with the details is returned.",
        "cancel_pending_trade": "Cancel any pending offer of a certain coin.",
        "get_balance": "Returns an int with the number of coins of a given currency. In case of error, a string with the details is returned.",
        "get_pin": "Returns a string with a PIN that refreshes every few minutes. This PIN is used to obtain an account in cryptocurrency services.",
        "list_coins": "Returns a string list with the names of the coins available in the wallet.",
        "list_global_coins": "Returns a string list with the names of all the currencies that exist.",
        "reset_password": "Change the password of the wallet. Only the account owner can change the password. Returns true if the process completed successfully, in case of error a string with the details is returned",
        "sell_coin": "Publish a sale offer indicating the amount of coins you want to sell and the price ($) per unit you want to assign. The sale will be finalized if there is any purchase offer with a price greater than or equal to that proposed in the sale. If there is no existing offer to buy that matches the requirements at that time, the offer to sell will remain publicly visible until a new offer to buy satisfies the requirements. If the publication has been successful, true is returned, in case of error a string with the details is returned.",
        "show_nodes": "Returns an int indicating the number of devices mining a specific coin for the same wallet. In case of error a string is returned with the details."
    },
    "Coin": {
        "reset_password_coin": "Reset the password for this coin.",
        "create_subwallet": "Register a new account in the Coin that can be used to manage services such as stores. It is necessary to use the PIN that the owner of the wallet that wants to register has to provide.",
        "get_address": "Returns the configured address that will be shown to users who do not have the currency, indicating where they have to register.",
        "get_cycle_mining": "Returns an int with the number of hours (game time) that each mining cycle lasts. When a cycle ends, it is decided who gets the reward (1 coin) and the next cycle begins.",
        "get_mined_coins": "Returns an int with the number of coins that have been mined so far.",
        "get_reward": "Returns an int with the number of coins that will be received as a reward after each mining cycle.",
        "get_subwallet": "Returns an object of type SubWallet, in case of error it returns a string with the details.",
        "get_subwallets": "Returns a list of objects of type SubWallet with all the accounts registered in the crypto currency, in case of error it returns a string with the details.",
        "set_address": "Configure a valid address that will be shown to users who do not have the currency, indicating where to register.",
        "set_cycle_mining": "Assign the hours (game time) that each mining cycle lasts. When a cycle ends, it is decided who gets the reward (1 coin) and the next cycle begins",
        "set_reward": "Assign the reward that miners will receive after each mining cycle",
        "transaction": "Make a transaction of the currency between the indicated subwallets. In case of error, a string with the details is returned."
    },
    "SubWallet": {
        "check_password": "Returns true if the credentials are correct, false otherwise.",
        "delete": "Delete the account registered in the crypto currency. Returns true on success or a string with the details of the error. It can return false if the account to be deleted does not exist.",
        "get_balance": "Returns an int with the amount of coins that the Subwallet has. In case of error, a string with the details is returned",
        "get_info": "Returns a string with the information stored by the coin creator",
        "get_user": "Returns a string with the username associated with this subwallet",
        "last_transaction": "Returns a list with the information of the last transaction. Index 0 is a string with the other subWallet. Index 1 is an int with the amount. Index 2 is an int with the direction of the transaction (0 Deposit, 1 Withdrawal). Index 3 is a string indicating the date of the transaction",
        "mining": "Starts the process of mining the cryptocurrency. The process leaves the terminal busy until a coin is mined, returning true",
        "set_info": "Optional information that the coin creator can store in the Subwallet for any use.",
        "wallet_username": "Returns a string with the name of the wallet to which this subwallet belongs."
    },
    "Service": {
        "install_service": "Installs the necessary files for the correct functioning of the service and starts it. Returns true if the installation has been completed successfully, in case of error a string with the details is returned.",
        "start_service": "Start the service and open its associated port on the local machine. The service needs portforward in the router to be accessible from the outside. Returns true if the service has started correctly, in case of error a string with the details is returned",
        "stop_service": "Stop the service and close its associated port on the local machine. Returns true if the service has been stopped correctly, in case of error a string with the details is returned"
    },
    "Shell": {
        "host_computer": "Returns the computer associated with the Shell.",
        "start_terminal": "Launch an active terminal from the Shell.",
        "build": "Compile the source code of the file that is in the provided path, and save the executable in the destination path.\nThe name of the executable is the same as that of the source file without the extension.\nThe provided paths must be absolutes.\n\nReturns a string (empty on success, or with an error on failure)",
        "connect_service": "Connect to a remote service. You can specify 'ftp' in the serviceType to request a FtpShell\n\nReturns a Shell or FtpShell if the connection has been established correctly or null on failure.",
        "launch": "Launches the command in the provided path.\n\nReturns null on success, or 0 on failure.",
        "ping": "Returns true if the remote address could be reached, false otherwise. Firewalls do not block ping requests.",
        "scp": "Copy a file from one computer to the other through the network.\n\nReturns 1 on success, or a string (containing an error) on failure.",
        "masterkey": "Connect to a remote server, regardless of any security.\n\n**This requires moderator permissions on Multiplayer, and is unavailable in Singleplayer.*",
        "masterkey_direct": "Connect to a remote server, regardless of any security. Differences unknown from normal masterkey.\n\n**This requires moderator permissions on Multiplayer, and is unavailable in Singleplayer.*",
        "restore_network": "Restore a network to it's original state, presumedly as would be done with ConfigLan.\n\n**This requires moderator permissions on Multiplayer, and is unavailable in Singleplayer.*"
    },
    "AptClient": {
        "show": "Shows all packages available in repository\nThe repository MUST be added in the /etc/apt/sources.txt file.\n\nReturns string with all pachages on success, or a string (containing an error) on failure.",
        "search": "Search specifically for the package in any of the repositories listed in /etc/apt/sources.txt\n\nReturns either a string with information about the package, or a string (containing an error) on failure.",
        "update": "Update the list of available packages after adding a new repository in /etc/apt/sources.txt, or if the remote repository has updated its information in /server/conf/repod.conf\n\nReturns string containing all repository addresses with 'Updated' prefix on success, or a string (containing an error) on failure.",
        "add_repo": "Add the repository address in the /etc/apt/sources.txt file\n\nReturns empty string on success, or a string (containing an error) on failure.",
        "del_repo": "Remove the repository address in the /etc/apt/sources.txt file.\n\nReturns empty string on success, or a string (containing an error) on failure.",
        "install": "Install the program or library from a remote repository listed in /etc/apt/sources.txt.\nUnless a path is specified, the program installs in /lib if it is a library or in /bin otherwise\n\nReturns a string (containing an error) on failure or empty on success.",
        "check_upgrade": "Check if there is a newer version of the file in the repository.\n\nReturns 1 or 0 if an update is or is not found respectively, or a string (containing an error) on failure."
    },
    "MetaMail": {
        "delete": "Delete the mail that corresponds with mail_ID.\n\nReturns 1 if it was removed successfully or a string with the error message.",
        "fetch": "Get all mails\n\nReturns a string type list of the received emails, with a content preview. In case of error, it returns a string.",
        "read": "Read the full mail. The mail_ID argument can be obtained with fetch method.\n\nReturns either the content as a string or an error message.",
        "send": "Send a new mail to the indicated recipient.\n\nReturns 1 if the mail has been sent correctly, otherwise returns a string with the error."
    },
    "FtpShell": {
        "host_computer": "Returns the computer associated with the FtpShell.",
        "start_terminal": "Launch an active terminal from the FtpShell.",
        "put": "Copy a file from one computer to the other through the network.\n\nReturns 1 on success, or a string (containing an error) on failure."
    },
    "Crypto": {
        "aircrack": "Returns a string with the password generated from the file created by aireplay.",
        "airmon": "Enables or disables the monitor mode of a network device. The option parameter can only be 'start' or 'stop'.",
        "aireplay": "Used to inject frames on wireless interfaces.\n\n\n\nOnce the command with Control+C is stopped, it will save the captured information in a text file called file.cap in the path where the terminal is currently located.\n\nAlternatively, a maximum of captured acks can be specified for the command to stop automatically, saving the file.cap file as described above.\n\nIn the event that there is an error, a string will be returned with the message indicating the problem.",
        "decipher": "Start the process of decrypting the password.",
        "smtp_user_list": "SMTP services are mail services. When using this method with the IP of a mail server, due to a vulnerability in the service, it returns a list of the existing users on the computer where the SMTP service is working. \nIf these users also have an email account registered on the SMTP server, it will be indicated in the list.\n\nReturns a list object of all users on the machine, along with their email address or returns a string containing an error"
    },
    "MetaLib": {
        "lib_name": "Returns the name of the library.",
        "version": "Returns the version of the library.",
        "overflow": "Exploits the indicated vulnerability through the buffer overflow method.\nThe object returned can be of various types or even not return anything, so it is advisable to use the typeof method with the object returned.\nDepending on the result, it may be necessary to pass extra arguments so that the exploit runs correctly, for example in the case of a password change.",
        "debug_tools": "Returns the library in debug mode, as an object of type LibraryDebug. To obtain it, it is necessary to provide a valid username and password of a Neurobox engineer."
    },
    "DebugLibrary": {
        "payload": "Returns a list with a single partial object of type Computer if potential zero-day vulnerabilities are found in the specified memory zone. If a file path is provided, its associated partial object of type File will also be added to the list. Additionally, if this file is a library, its metalib object will also be added to the returned list.",
        "apply_patch": "Applies the patch with the corrected code to the text file specified in the path. Returns true if the patch has been applied successfully, false otherwise.",
        "scan": "Scans the library in debug mode to find possible code errors that could lead to a vulnerability. If any potential issues are found, the associated code snippet is printed.",
        "unit_testing": "Automated tests are conducted on the specified lines of code. If potential vulnerabilities are found due to existing errors in these lines, the partial objects that would be obtained by exploiting it are printed, as well as the memory zone affected by the new vulnerability and its details."
    },
    "Metaxploit": {
        "load": "Load the library in memory and return it as a metalib type if the process was successful.",
        "net_use": "It connects to the specified address and establishes a null session to gain access to a library remotely.\nThis type of attack is only available for services that work remotely.\nIf no port is specified, it will connect directly to the router.\nIf the process has been executed correctly, an object of type net_session will be returned.",
        "rshell_client": "Launches a process on the victim's machine, which silently tries to continuously connect in the background to the specified address and port.\nFor the reverse shell to run successfully, the rshell service must be installed and the portforward configured correctly on the machine where the server is waiting for the victim's connection.",
        "rshell_server": "This method returns a list of shell objects that have been reverse shell connected to this machine.\nIn order to manage the connections received, the rshell service must be installed on the machine that receives the victims' connections.",
        "scan_address": "It analyzes a specific memory address and shows the vulnerable parts that can be exploited.",
        "scan": "Analyze the memory areas occupied by the library in search of vulnerabilities. Returns a list with the affected memory zones.",
        "sniffer": "The terminal listens to the network packets of any connection that passes through this device. \nWhen any connection information is captured, it prints a string with the obtained data. \nIt can save the source code of the encode script if saveEncSource is true.\nNull is returned if the listen could not be started." 
    },
    "Port": {
        "port_number": "Returns an number with the configured port number.",
        "is_closed": "Returns true if this port is closed, false otherwise.",
        "get_lan_ip": "Returns a string with the local IP address of the computer pointed to by this port."
    },
    "Router": {
        "bssid_name": "Returns a string with the BSSID value of the router.",
        "device_ports": "Takes a LAN IP address and returns a list with open ports accessible in the network.",
        "devices_lan_ip": "Returns a list with any computer whose gateway is the current device with the ips of the routers and switches that it can reach with a ping. \nSome of the returned addresses could be behind a firewall",
        "essid_name": "Returns a string with the ESSID value of the router.",
        "firewall_rules": "Returns a string list with the firewall rules present in the router or switch.",
        "kernel_version": "Returns a string with the version of the kernel_router.so library",
        "local_ip": "Returns a string with the router's local ip address.",
        "ping_port": "Returns the port object that is behind the port number provided if exists, null otherwise.",
        "port_info": "Returns a string with the information of the port that has been provided. The port provided must not belong to another network than this router.",
        "public_ip": "Returns a string with the router's public ip address.",
        "used_ports": "Returns an array of ports that are being used in this router."
    },
    "NetSession": {
        "dump_lib": "Returns the metalib associated with the remote service.\n\n\n\nFor example, connecting to a computer with the ssh service will return a metalib libssh object.\n\nIn the case of connecting to a router, it returns a metalib kernel_router object.",
        "get_num_conn_gateway": "Returns the number of devices connected to it as a gateway.",
        "get_num_portforward": "Returns the number of ports configured with a portforward from the remote device.",
        "get_num_users": "Returns the number of user accounts on the target",
        "is_any_active_user": "Returns true if there are any active users on the system, false otherwise.",
        "is_root_active_user": "Returns true if the root user is active on the system, false otherwise."
    },
    "File": {
        "allow_import": "Returns rather the file is able to be imported.",
        "chmod": "Modifies the file's permissions\n\n\n\nTakes a permissions string (e.g. u+wr) and optional recursive flag (int 0 or 1)\n\nIf the file is a folder and the recursive flag is 1, the permissions change will apply recursively, to all the files and folders inside the folder.\n\nReturns a string (empty on success, or with an error on failure)",
        "copy": "Copy the file to the specified path.\n\nOn success, returns 1 and the terminal outputs the copied file dialogue. On failure, returns either an error (string) such as permission denied or null (if File object not valid).",
        "move": "Move the file to the specified path.\n\nOn success, returns 1. On failure, returns either an error (string) such as permission denied or null (if File object not valid).",
        "rename": "Rename the file with the name provided.\n\nReturns a string (empty on success, or with an error on failure)",
        "path": "Returns a string with the absolute path of the file. If followSymlink is true, it will print the path of the symlink destination.",
        "parent": "Returns the folder that contains this file or null if the initial object is /.",
        "name": "Returns a string with the name of the file.",
        "get_content": "Returns a string with the contents of the text file.",
        "set_content": "Save the text in the file. The content will be overwritten if there is already text saved in the file.\n\nReturns 1 on success, or a string (containing an error) on failure",
        "is_folder": "Returns true if the file is folder, false otherwise.",
        "is_binary": "Returns true if the file is binary, false otherwise.",
        "has_permission": "Returns true if the user who launches the script has the necessary permissions.\nThe type_perm parameter is used for reading ('r'), writing ('w') and execution ('x')",
        "delete": "Delete the file\n\nReturns a string (empty on success, or with an error on failure)",
        "get_folders": "Returns an array of the folders contained in this object. This function is only available if this object is a folder, so it is advisable to first use the is_folder function before calling this method.",
        "get_files": "Returns an array of files (excluded folders) contained in this object. This function is only available if this object is a folder, so it is advisable to first use the is_folder function before calling this method.",
        "permissions": "Returns a string with the current file permissions.",
        "owner": "Returns a string with the name of the file owner.",
        "set_owner": "Apply a owner to this file. By default, the owner does not apply recursively. To apply the owner recursively, the optional parameter must be 1.\n\nReturns a string (empty on success, or with an error on failure)",
        "group": "Returns a string with the name of the group to which this file belongs.",
        "set_group": "Apply a group to this file. By default, the group does not apply recursively. To apply the group recursively, the optional parameter must be 1.\n\nReturns a string (empty on success, or with an error on failure)",
        "size": "Returns a string with the size of the file in bytes.",
        "symlink": "Creates a symbolic link at the specified path.",
        "is_symlink": "Returns true/false if the file object is a symbolic link.",
        "meta_info": "Presumedly returns metadata information about a file.\n\n**This requires moderator permissions on Multiplayer, and is unavailable in Singleplayer.*"
    },
    "TrafficNet": {
        "camera_link_system": "Opens a traffic camera system window with controls to switch between cameras.",
        "locate_vehicle": "Searches traffic cameras to see if a vehicle with the specified license plate can be identified. If true, the viewer will switch to the camera. If not, a string indicating an error is returned.",
        "next_camera": "Switches to the next camera.",
        "prev_camera": "Switches to the previous camera.",
        "traffic_light_config": "[Work in progress] - Wild speculation, but maybe this will let you kill NPCs, or at least delay them from reaching work?"
    },
    "SmartAppliance": {
        "model": "Returns the model of the appliance as a string.",
        "override_settings": "Overrides the power and temp. values of the appliance. Returns true if successful, otherwise returning a string as an error.",
        "set_alarm": "Activates or deactivates the sound alarm that indicates if there is any malfunction in the appliance."
    },
    "Computer": {
        "get_name": "Get the hostname of the computer.",
        "local_ip": "Returns a string with the computer's local ip address.",
        "public_ip": "Returns a string with the computer's public ip address.",
        "get_ports": "Returns an array of active ports on the computer.",
        "File": "Returns the file located in the given path, relative or absolute. The file returned can be a folder. If the file does not exist, it is returned null.",
        "create_folder": "Create a folder in the specified path.",
        "is_network_active": "Returns true if the computer has internet access, false otherwise.",
        "touch": "Create an empty text file.\n\nReturns 1 on success, or a string (containing an error) on failure",
        "show_procs": "Returns a string with the list of active processes on the machine.",
        "network_devices": "Returns a string with the list of network devices available on the computer.",
        "change_password": "Change the password of an existing user on the machine, for a new one.\nIt is necessary to be root to be able to execute the method.\n\nReturns 1 on success, or error string on failure",
        "create_user": "Create a user on the machine, with the specified name and password. It is necessary to be root to be able to execute the method.\n\nReturns 1 on success, or error string on failure",
        "delete_user": "Delete the indicated user from the computer, also deleting its home folder optionally. \nBy default, if the optional parameter is not passed, the home folder will not be deleted.\nIt is necessary to be root to be able to execute the method.\n\nReturns 1 on success, or error string on failure",
        "create_group": "Create a new group associated with an existing user on the machine. It is necessary to be root to be able to execute the method.\n\nReturns 1 on success, or error string on failure",
        "delete_group": "Delete the indicated user group. It is necessary to be root in order to execute this method.\n\nReturns 1 on success, or error string on failure",
        "groups": "Returns a string with the list of groups created in the indicated user.",
        "close_program": "Close the program associated with the PID. To show the list of the running programs along with their PIDs use the ps command.\n\nReturns 1 on success, 0 if the process cannot be found, or an error string on failure to terminate the process",
        "wifi_networks": "Returns a list of the Wi-Fi networks that are available.",
        "connect_wifi": "Connect to the indicated Wifi network. Returns true if the connection was successful.\n\nReturns 1 on successful connection, null if the network cannot be found, or an error string on connection failure",
        "connect_ethernet": "Notice: Ethernet is currently disabled in multiplayer on both public and nightly builds!\n\nSet up a new IP address on the machine through the ethernet connection.\nReturns a string with the error message if the connection failed. In case of success, an empty string is returned.",
        "network_gateway": "Returns a string with the gateway configured on the computer.",
        "active_net_card": "Returns a string with the keyword WIFI if the current device is connected to a router by WiFi, if it is connected by cable a string with the keyword ETHERNET is returned."
    },
    "General": {
        "reset_ctf_password": "Reset your player password used for all CTFs.",
        "get_ctf": "Gets the event created in the web browser. In case of success, it will return a CTFEvent type object, otherwise it will return a string with the error.",
        "get_custom_object": "Returns an empty Map object that can be used to share data back and forth with programs launched with shell.launch.",
        "mail_login": "Access the email account\n\nReturns a MetaMail type object if the login has been correct. In case of error, it returns a string",
        "typeof": "Returns a string with the type of the object passed as a parameter.",
        "get_router": "Returns the router whose public IP matches, otherwise returns null.\nIf the ip_address parameter is not specified, returns the router to which the computer executing this command is connected.",
        "get_switch": "Returns the switch on the local network whose IP matches, otherwise it returns null.",
        "nslookup": "Returns the IP address that is behind the web address that has been provided.",
        "print": "Print on the Terminal the message.",
        "clear_screen": "Clears all text from the terminal.",
        "active_user": "Returns a string with the name of the user who is executing the script.",
        "home_dir": "Returns a string with home folder path of the user who is executing the script.",
        "get_shell": "Returns the shell that is executing the script if it is called without parameters. \nPassing a username and password, it returns a shell with those credentials if are correct.",
        "user_input": "It puts the program on hold to receive the user input, which will be processed as a string. If the password mode is activated, the input text will be hidden with asterisks. If the anyKey argument is true, the entered character will be captured without pressing enter.",
        "include_lib": "Includes an external library to be used in scripting. If the library has been included correctly, it will return an object of corresponding type with the library, null otherwise",
        "import_code": "Includes external code into the current code. Can be used to split code in multiple files.\nNote: The code will be added to the current code upon compiling.",
        "exit": "Stops the execution of the script at the time this method is executed. Optionally you can pass a string as a message that will be printed in the terminal when the program ends.",
        "user_mail_address": "Returns a string with the user's email address that is executing this script.\nThis is only defined on a player's home computer.",
        "user_bank_number": "Returns a string with the bank account number of the user who is executing this script.\nThis is only defined on a player's home computer.",
        "whois": "Shows the administrator information behind the IP provided.",
        "wait": "Pauses the script for the indicated time. If duration is not specified, the default value is 1 second.",
        "command_info": "Returns the information of common commands of the Operating System, such as mkdir, whois, etc.",
        "program_path": "Returns a string with the path of the program that is running at this time.",
        "current_path": "It returns a string with the path in which the terminal is at the moment of launching the script.",
        "format_columns": "Format the text provided so that it is ordered by columns.",
        "current_date": "Returns the time and date.",
        "is_lan_ip": "Returns true if the provided address is local, false otherwise. If the provided IP is not valid, it also returns false.",
        "is_valid_ip": "Returns true if the provided address is valid, false otherwise.",
        "bitwise": "Bitwise operators are used for manipulating data at the bit level.\nBitwise operates on one or more bit patterns or binary numerals at the level of their individual bits. \nThey are used in numerical computations to make the calculation process faster.\nThe operator argument accepts the following operators:\n&, |, ^, <<, >>, >>>",
        "bitAnd": "Returns the bitwise AND operation of the provided inputs.",
        "bitOr": "Returns the bitwise OR operation of the provided inputs.",
        "bitXor": "Returns the bitwise OR operation of the provided inputs.",
        "hash": "Returns a integer that is \"relatively unique\" to the given value. In the case of strings, the hash is case-sensitive. In the case of a list r map, the hash combines the hash values of all elements.",
        "launch_path": "Returns the path of the program that launched this program.",
        "log": "Returns the logarithm of the provided input to the specified base.",
        "abs": "Returns the absolute value of the provided input.",
        "acos": "Returns the arccosine of the provided input in radians.",
        "asin": "Returns the arcsine of the provided input in radians.",
        "atan": "Returns the arctangent of the provided input in radians.",
        "tan": "Returns the tangent of the provided input.",
        "cos": "Returns the cosine of the provided input.",
        "sin": "Returns the sine of the provided input.",
        "char": "Returns the unicode character at the provided input's code point.",
        "floor": "Returns the provided input floored to it's base integer.",
        "range": "Returns a list object containing values from the start to the end, incrementing by increment.",
        "round": "Returns the provided input rounded to the decimal place provided.",
        "rnd": "Returns a random float between 0 and 1. If seed is provide, it seeds the random number with the given value.",
        "sign": "Returns the sign of the provided input.",
        "sqrt": "Returns the square root of the provided input.",
        "str": "Converts the provided input into a string.",
        "ceil": "Returns the provided input raised to the next or equal integer.",
        "pi": "Returns 3.14159265358979 (this will probably never be useful!)",
        "for": "A for loop can loop over any list, including ones easily created with the range function.",
        "while": "Use a while block to loop as long as a condition is true.",
        "break": "The break statement jumps out of a while or for loop",
        "continue": "The continue statement jumps to the top of the loop, skipping the rest of the current iteration.",
        "if": "Use if blocks to do different things depending on some condition.\nYou can include an else or an else if to create conditions for all your needs.",
        "else": "Use else blocks to do things if the previous if condition was false.\nAn else block can be chained with an if creating a conditional else block.",
        "slice":"Returns the provided string or list from index start to index end.",
        "function": "Create a user defined function block where you can run your own snippets of code.",
        "then": "Ends the conditioning of an if statement.",
        "end": "Ends the provided code block.",
        "parent_path": "Returns the parent directory of the given path.",
        "time": "Returns the number of seconds since the program execution began.",
        "true": "A constant value of 1. Easy for return types or the use in an if statement.",
        "false": "A constant value of 0. Easy for return types or the use in an if statement.",
        "lan_ip": "Same as Computer.local_ip, but works exclusively with Computer and not Router",
        "public_ip_pc": "Same as Computer.public_ip, but works exclusively with Computer and not Router",
        "delete_mail": "Same as MetaMail.delete, but works exclusively with MetaMail and no other types",
        "delete_subwallet": "Same as SubWallet.delete, but works exclusively with SubWallet and no other types",
        "get_balance_subwallet": "Same as SubWallet.get_balance, but works exclusively with SubWallet and not Wallet"
    },
    "String": {
        "remove": "Returns the string without the first occurrence of the provided substring.",
        "hasIndex": "Returns 1 if the index exists. Returns 0 otherise.",
        "indexOf": "Returns the first index of the provided input with the string. Optionally searches after begin. Returns Null if not found.",
        "lastIndexOf": "Returns the last index of the provided input with the string. Returns -1 if not found.",
        "insert": "Inserts the provided value into the specified index on the string. Returns the updated string.",
        "split": "Returns a list object of substrings. \n Uses regular expressions.",
        "replace": "Returns the string with any instances of new replaced with old. \n Uses regular expressions.",
        "trim": "Returns the string stripped of any spacing at the beginning or end.",
        "indexes": "Returns a list object containing indexes of all characters in the string.",
        "code": "Returns the unicode code point of the first character in the string.",
        "len": "Returns the length of the provided object.",
        "lower": "Returns the lowercase string.",
        "upper": "Returns the uppercase string.",
        "val": "Converts the string to a float.",
        "values": "Returns a list object containing values of all characters in the string.",
        "to_int": "Converts the string to a integer.",
        "is_match": "Returns a boolean dependent on if the string contains the pattern.",
        "matches": "Returns a list of every match."
    },
    "List": {
        "hasIndex": "Returns 1 if the index exists. Returns 0 otherise.",
        "indexOf": "Returns the index of the provided value. Optionally searches after begin. Returns Null if not found.",
        "push": "Pushes the provided input onto the end of the list. Returns the updated list, and updates the list in it's place.",
        "insert": "Inserts the provided value into the specified index on the list. Returns the updated list, and updates the list in it's place.",
        "pop": "Returns the last element of the list, and removes that element from the list.",
        "pull": "Returns the first element of the list, and removes that element from the list.",
        "shuffle": "Randomly remaps values in a list, leaving the keys in their original order.",
        "sort": "Sorts a list alphanumerically.",
        "join": "Concatenates all items within the list and returns them in a single string.",
        "reverse": "Reverses the list, rearranging the element in reverse order.",
        "remove": "Returns the list without the first occurrence of the provided input.",
        "indexes": "Returns a list object containing the list's indexes",
        "len": "Returns the length of the provided object.",
        "values": "Returns a list object containing the list's values",
        "sum": "Returns the total of all numeric values in a list."
    },
    "Map": {
        "hasIndex": "Returns 1 if the index exists. Returns 0 otherise.",
        "indexOf": "Returns the first index of the provided input with the string. Optionally searches after begin. Returns Null if not found.",
        "push": "Pushes the provided input onto the end of the map. Returns the updated map, and updates the map in it's place.",
        "pop": "Returns the key of the first element in the map, and removes that element from the map.",
        "shuffle": "Randomly remaps values in a map, leaving the keys in their original order.",
        "remove": "Returns the map without the first occurrence of the provided input.",
        "indexes": "Returns a list object containing the map's indexes.",
        "len": "Returns the length of the provided object.",
        "values": "Returns a list object containing the map's values.",
        "sum": "Returns the total of all numeric values in a map."
    }
}